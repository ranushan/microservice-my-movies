"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const platform_builder_1 = require("../../platform-builder");
const expressApplication_1 = require("../decorators/expressApplication");
const GlobalErrorHandlerMiddleware_1 = require("../middlewares/GlobalErrorHandlerMiddleware");
const LogIncomingRequestMiddleware_1 = require("../middlewares/LogIncomingRequestMiddleware");
require("../services/PlatformExpressApplication");
require("../services/PlatformExpressRouter");
const ServeStaticService_1 = require("../services/ServeStaticService");
const utils_1 = require("../utils");
const VERSION = require("../../../package.json").version;
/**
 * ServerLoader provider all method to instantiate an ExpressServer.
 *
 * It provide some features :
 *
 * * [Lifecycle hooks](/docs/server-loader.md#lifecycle-hooks),
 * * Middleware importation,
 * * Scan directory. You can specify controllers and services directory in your project,
 *
 * ```typescript
 * // In server.ts
 * import {ServerLoader, ServerSettings} from "@tsed/common";
 * import Path = require("path");
 * @ServerSettings({
 *    rootDir: Path.resolve(__dirname),
 *    port: 8000,
 *    httpsPort: 8080,
 *    mount: {
 *      "/rest": "${rootDir}/controllers/**\/*.js"
 *    }
 * })
 * export class Server {
 *   $beforeRoutesInit(){
 *     // add middlewares here
 *   }
 * }
 *
 * // In index.ts
 * import Server from "./server";
 *
 * function bootstrap(settings: any) {
 *   const server = ServerLoader.bootstrap(settings);
 *
 *   await server.listen()
 * }
 *
 * bootstrap();
 * ```
 */
class ServerLoader extends platform_builder_1.PlatformBuilder {
    constructor(settings = {}) {
        super();
        this.version = VERSION;
        this._rootModule = this;
        this.createInjector(core_1.constructorOf(this), settings);
    }
    /**
     * Return Express Application instance.
     * @returns {core.Express}
     * @deprecated Use this.app.raw
     */
    get expressApp() {
        return this.injector.get(expressApplication_1.ExpressApplication);
    }
    /**
     * Return the InjectorService initialized by the server.
     * @returns {InjectorService}
     * @deprecated use this.injector
     */
    get injectorService() {
        return this.injector;
    }
    /**
     * Return Http.Server instance.
     * @returns {Http.Server}
     */
    get httpServer() {
        return this.injector.get(platform_builder_1.HttpServer);
    }
    /**
     * Return Https.Server instance.
     * @returns {Https.Server}
     */
    get httpsServer() {
        return this.injector.get(platform_builder_1.HttpsServer);
    }
    static bootstrap(module, settings = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const server = new module(settings);
            yield server.runLifecycle();
            return server;
        });
    }
    /**
     * Create a new HTTP server with the provided `port`.
     * @returns {ServerLoader}
     * @deprecated Use this.settings.httpPort instead
     */
    // istanbul ignore next
    createHttpServer(port) {
        this.settings.httpPort = port;
        return this;
    }
    /**
     * Create a new HTTPs server.
     *
     * `options` @@IHTTPSServerOptions@@:
     *
     * key | type | Description
     * ---|---|---
     * port | number |Â Port number
     * key | string, [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer), Object | The private key of the server in PEM format. To support multiple keys using different algorithms an array can be provided either as a plain array of key strings or an array of objects in the format `{pem: key, passphrase: passphrase}`. This option is required for ciphers that make use of private keys.
     * passphrase | string | A string containing the passphrase for the private key or pfx.
     * cert | string, [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer) | A string, Buffer, array of strings, or array of Buffers containing the certificate key of the server in PEM format. (Required)
     * ca | string, [Buffer](https://nodejs.org/api/buffer.html#buffer_class_buffer) | A string, Buffer, array of strings, or array of Buffers of trusted certificates in PEM format. If this is omitted several well known "root" CAs (like VeriSign) will be used. These are used to authorize connections.
     *
     * See more info on [httpsOptions](https://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener).
     *
     * @param options Options to create new HTTPS server.
     * @returns {ServerLoader}
     * @deprecated
     */
    // istanbul ignore next
    createHttpsServer(options) {
        this.settings.httpsPort = options.port;
        return this;
    }
    /**
     * This method let you to add a express middleware or a Ts.ED middleware like GlobalAcceptMimes.
     *
     * ```typescript
     * @ServerSettings({
     *    rootDir,
     *    acceptMimes: ['application/json'] // optional
     * })
     * export class Server extends ServerLoader {
     *     $beforeRoutesInit(): void|Promise<any> {
     *         const methodOverride = require('method-override');
     *
     *         this.app
     *             .use(GlobalAcceptMimesMiddleware)
     *             .use(methodOverride());
     *
     *         return null;
     *     }
     * }
     * ```
     * @param args
     * @returns {ServerLoader}
     */
    use(...args) {
        this.app.use(...args);
        return this;
    }
    /**
     * Proxy to express set
     * @param setting
     * @param val
     * @returns {ServerLoader}
     * @deprecated Use this.app.raw.set() instead of
     */
    set(setting, val) {
        this.app.raw.set(setting, val);
        return this;
    }
    /**
     * Proxy to express engine
     * @param ext
     * @param fn
     * @returns {ServerLoader}
     * @deprecated Use this.app.raw.engine() instead of
     */
    engine(ext, fn) {
        this.app.raw.engine(ext, fn);
        return this;
    }
    /**
     * Start the express server.
     * @returns {Promise<any>|Promise}
     */
    start() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.runLifecycle();
                yield this.listen();
            }
            catch (err) {
                this.callHook("$onServerInitError", undefined, err);
                return Promise.reject(err);
            }
        });
    }
    /**
     * Run server lifecycle
     */
    runLifecycle() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const routes = yield this.loadSettingsAndInjector();
            yield this.loadMiddlewares(routes);
        });
    }
    /**
     * Run listen event and start servers
     */
    listen() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.callHook("$beforeListen");
            yield this.listenServers();
            yield this.callHook("$afterListen");
            yield this.ready();
            this.injector.logger.info(`Started in ${new Date().getTime() - this.startedAt.getTime()} ms`);
        });
    }
    /**
     * Run ready event
     */
    ready() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.callHook("$onReady");
            yield this.injector.emit("$onServerReady");
        });
    }
    /**
     * Scan and imports all files matching the pattern. See the document on the [Glob](https://www.npmjs.com/package/glob)
     * pattern for more information.
     *
     * #### Example
     *
     * ```typescript
     * import {ServerLoader} from "@tsed/common";
     * import Path = require("path");
     *
     * export class Server extends ServerLoader {
     *
     *    constructor() {
     *        super();
     *
     *        let appPath = Path.resolve(__dirname);
     *
     *        this.scan(appPath + "/controllers/**\/**.js")
     *   }
     * }
     * ```
     *
     * Theses pattern scan all files in the directories controllers, services recursively.
     *
     * > On windows on can have an issue with the Glob pattern and the /. To solve it, build your path pattern with the module Path.
     *
     * ```typescript
     * const controllerPattern = Path.join(rootDir, 'controllers','**','*.js');
     * ```
     *
     * @param patterns
     * @param endpoint
     * @returns {ServerLoader}
     * @deprecated Will be removed in future
     */
    scan(patterns, endpoint) {
        if (endpoint) {
            this.addControllers(endpoint, [].concat(patterns));
        }
        else {
            this.addComponents([].concat(patterns));
        }
        return this;
    }
    addComponents(classes, options = {}) {
        return super.addComponents(classes);
    }
    /**
     * Mount all controllers files that match with `globPattern` ([Glob Pattern](https://www.npmjs.com/package/glob))
     * under the endpoint.
     *
     * ::: tip
     * See [Versioning Rest API](/docs/controllers.md#routing) for more information.
     * :::
     *
     * @param endpoint
     * @param list
     * @returns {ServerLoader}
     * @deprecated use ServerLoader.addControllers instead
     */
    mount(endpoint, list) {
        this.addControllers(endpoint, list);
        return this;
    }
    /**
     *
     * @returns {Promise<void>}
     */
    loadSettingsAndInjector() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            platform_builder_1.setLoggerLevel(this.injector);
            const routes = yield platform_builder_1.importProviders(this.injector);
            yield this.loadInjector();
            return routes;
        });
    }
    /**
     * Initialize configuration of the express app.
     */
    loadMiddlewares(routes) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.createContext();
            yield this.loadRoutes(routes);
            yield this.logRoutes();
        });
    }
    /**
     * Load given routes and add GlobalErrorHandlerMiddleware
     * @param routes
     */
    loadRoutes(routes) {
        const _super = Object.create(null, {
            loadRoutes: { get: () => super.loadRoutes }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.settings.logger.level !== "off" && this.app.use(LogIncomingRequestMiddleware_1.LogIncomingRequestMiddleware); // FIXME will be deprecated
            yield this.callHook("$onMountingMiddlewares"); // deprecated
            yield _super.loadRoutes.call(this, routes);
            // Import the globalErrorHandler
            this.use(GlobalErrorHandlerMiddleware_1.GlobalErrorHandlerMiddleware);
        });
    }
    loadStatics() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const staticsService = this.injector.get(ServeStaticService_1.ServeStaticService);
            staticsService.statics(this.injector.settings.statics);
        });
    }
    /* istanbul ignore next */
    setSettings(settings) {
        this.settings.set(settings);
        /* istanbul ignore next */
        if (this.settings.env === "test") {
            this.injector.logger.stop();
        }
    }
    /**
     * Create Server.injector with express application, Http and Https server
     * @param module
     * @param settings
     */
    createInjector(module, settings) {
        var _a;
        super.createInjector(module, settings);
        utils_1.createExpressApplication(this.injector);
        platform_builder_1.createHttpsServer(this.injector);
        platform_builder_1.createHttpServer(this.injector);
        (_a = this.settings.imports) === null || _a === void 0 ? void 0 : _a.forEach(token => {
            this.injector.invoke(token);
        });
    }
}
tslib_1.__decorate([
    core_1.Deprecated("Use ServerLoader.addControllers or ServerLoader.addComponents instead"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, String]),
    tslib_1.__metadata("design:returntype", ServerLoader)
], ServerLoader.prototype, "scan", null);
tslib_1.__decorate([
    core_1.Deprecated("Use ServerLoader.addControllers instead"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", ServerLoader)
], ServerLoader.prototype, "mount", null);
exports.ServerLoader = ServerLoader;
//# sourceMappingURL=ServerLoader.js.map