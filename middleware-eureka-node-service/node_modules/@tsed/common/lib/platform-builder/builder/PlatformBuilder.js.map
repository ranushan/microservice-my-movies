{"version":3,"file":"PlatformBuilder.js","sourceRoot":"","sources":["../../../src/platform-builder/builder/PlatformBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import {classOf, constructorOf, Type} from \"@tsed/core\";\nimport {IDIConfigurationOptions, InjectorService} from \"@tsed/di\";\nimport {IRoute, Platform, PlatformApplication} from \"../../platform\";\nimport {ContextMiddleware} from \"../middlewares/ContextMiddleware\";\nimport {\n  callHook,\n  createContainer,\n  createInjector,\n  createPlatformApplication,\n  getConfiguration,\n  importProviders,\n  listenHttpServer,\n  listenHttpsServer,\n  loadInjector,\n  printRoutes,\n  setLoggerLevel\n} from \"../utils\";\n\nexport abstract class PlatformBuilder {\n  protected startedAt = new Date();\n  protected _rootModule: any;\n  protected _injector: InjectorService;\n\n  get injector(): InjectorService {\n    return this._injector;\n  }\n\n  get rootModule(): any {\n    return this._rootModule;\n  }\n\n  get app(): PlatformApplication {\n    return this.injector.get<PlatformApplication>(PlatformApplication)!;\n  }\n\n  get platform() {\n    return this.injector.get<Platform>(Platform)!;\n  }\n\n  /**\n   * Return the settings configured by the decorator @@ServerSettings@@.\n   *\n   * ```typescript\n   * @ServerSettings({\n   *    rootDir: Path.resolve(__dirname),\n   *    port: 8000,\n   *    httpsPort: 8080,\n   *    mount: {\n   *      \"/rest\": \"${rootDir}/controllers/**\\/*.js\"\n   *    }\n   * })\n   * export class Server extends ServerLoader {\n   *     $onInit(){\n   *         console.log(this.settings); // {rootDir, port, httpsPort,...}\n   *     }\n   * }\n   * ```\n   *\n   * @returns {ServerSettingsService}\n   */\n  get settings() {\n    return this.injector.settings;\n  }\n\n  get logger() {\n    return this.injector.logger;\n  }\n\n  static build<T extends PlatformBuilder>(platformBuildClass: Type<T>): T {\n    return new platformBuildClass();\n  }\n\n  /**\n   * Add classes to the components list\n   * @param classes\n   */\n  public addComponents(classes: any | any[]) {\n    this.settings.componentsScan = this.settings.componentsScan.concat(classes);\n\n    return this;\n  }\n\n  /**\n   * Add classes decorated by @@Controller()@@ to components container.\n   *\n   * ### Example\n   *\n   * ```typescript\n   * @Controller('/ctrl')\n   * class MyController{\n   * }\n   *\n   * new ServerLoader().addControllers('/rest', [MyController])\n   * ```\n   *\n   * ::: tip\n   * If the MyController class isn't decorated, the class will be ignored.\n   * :::\n   *\n   * @param {string} endpoint\n   * @param {any[]} controllers\n   * @returns {ServerLoader}\n   */\n  public addControllers(endpoint: string, controllers: any | string | (any | string)[]) {\n    this.settings.mount[endpoint] = (this.settings.mount[endpoint] || []).concat(controllers);\n  }\n\n  public async runLifecycle() {\n    setLoggerLevel(this.injector);\n\n    const routes = await importProviders(this.injector);\n\n    await this.loadInjector();\n    await this.createContext();\n    await this.loadRoutes(routes);\n    await this.logRoutes();\n  }\n\n  async loadInjector() {\n    const {injector, logger} = this;\n    await this.callHook(\"$beforeInit\");\n    await this.callHook(\"$onInit\");\n\n    logger.info(\"Build providers\");\n\n    await loadInjector(injector, createContainer(constructorOf(this.rootModule)));\n\n    logger.debug(\"Settings and injector loaded\");\n    await this.callHook(\"$afterInit\");\n  }\n\n  async listen() {\n    const {logger, startedAt} = this;\n    await this.callHook(\"$beforeListen\");\n\n    await this.listenServers();\n\n    await this.callHook(\"$afterListen\");\n\n    await this.ready();\n    logger.info(`Started in ${new Date().getTime() - startedAt.getTime()} ms`);\n  }\n\n  public async ready() {\n    await this.callHook(\"$onReady\");\n    await this.injector.emit(\"$onServerReady\");\n  }\n\n  callHook(key: string, ...args: any[]) {\n    return callHook(this.injector, this.rootModule, key, ...args);\n  }\n\n  protected async bootstrap(module: Type<any>, settings: Partial<TsED.Configuration> = {}) {\n    this.createInjector(module, settings);\n    this.createRootModule(module);\n\n    await this.runLifecycle();\n\n    return this;\n  }\n\n  protected abstract async loadStatics(): Promise<void>;\n\n  protected async listenServers(): Promise<void> {\n    await Promise.all([listenHttpServer(this.injector), listenHttpsServer(this.injector)]);\n  }\n\n  protected logRoutes() {\n    const {logger, platform} = this;\n\n    if (!this.settings.logger.disableRoutesSummary) {\n      logger.info(\"Routes mounted :\");\n      logger.info(printRoutes(platform.getRoutes()));\n    }\n  }\n\n  protected async createContext() {\n    const middleware = new ContextMiddleware(this.injector);\n\n    return this.app.use(middleware.use.bind(middleware));\n  }\n\n  protected async loadRoutes(routes: IRoute[]) {\n    const {logger, platform} = this;\n\n    logger.info(\"Load routes\");\n    await this.callHook(\"$beforeRoutesInit\"); // deprecated\n\n    platform.addRoutes(routes);\n\n    await this.callHook(\"$onRoutesInit\");\n\n    await this.loadStatics();\n\n    await this.callHook(\"$afterRoutesInit\");\n  }\n\n  protected createInjector(module: Type<any>, settings: any) {\n    this._injector = createInjector(getConfiguration(module, settings));\n    createPlatformApplication(this.injector);\n  }\n\n  protected createRootModule(module: Type<any>) {\n    this._rootModule = this.injector.invoke(module, undefined, {\n      imports: this.settings.imports\n    });\n\n    this.injector.delete(constructorOf(this._rootModule));\n    this.injector.delete(classOf(this._rootModule));\n  }\n}\n"]}