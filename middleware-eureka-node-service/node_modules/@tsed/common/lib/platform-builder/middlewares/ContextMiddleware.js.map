{"version":3,"file":"ContextMiddleware.js","sourceRoot":"","sources":["../../../src/platform-builder/middlewares/ContextMiddleware.ts"],"names":[],"mappings":";;;AACA,6CAA8C;AAE9C,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC1C,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAElC,MAAM,mBAAmB,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAE9D,MAAa,iBAAiB;IAM5B,YAAoB,QAAyB;QAAzB,aAAQ,GAAR,QAAQ,CAAiB;QAC3C,MAAM,EAAC,KAAK,EAAE,YAAY,EAAE,iBAAiB,GAAG,EAAE,EAAE,YAAY,GAAG,mBAAmB,EAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,CAAC;QAEzH,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,YAAY,GAAG,YAAa,CAAC;QAClC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAED,MAAM,CAAO,OAAO,CAAC,GAAQ,EAAE,QAAa;;YAC1C,MAAM,EAAC,GAAG,EAAE,OAAO,EAAC,GAAG,QAAQ,CAAC;YAEhC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;YACzD,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;YAE5B,OAAO,OAAO,CAAC,GAAG,CAAC;YACnB,OAAO,OAAO,CAAC,GAAG,CAAC;QACrB,CAAC;KAAA;IAEK,GAAG,CAAC,OAAY,EAAE,QAAa,EAAE,IAAS;;YAC9C,MAAM,EAAC,KAAK,EAAE,iBAAiB,EAAE,YAAY,EAAC,GAAG,IAAI,CAAC;YAEtD,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YAE/B,OAAO,CAAC,GAAG,GAAG,IAAI,yBAAc,CAAC;gBAC/B,EAAE;gBACF,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;gBAC5B,GAAG,EAAE,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,GAAG;gBACvC,iBAAiB;gBACjB,KAAK;gBACL,YAAY;gBACZ,QAAQ,EAAE,IAAI,CAAC,QAAQ;aACxB,CAAC,CAAC;YAEH,aAAa;YACb,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YAEjC,UAAU,CAAC,QAAQ,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAEhD,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;YAE1D,IAAI,EAAE,CAAC;QACT,CAAC;KAAA;CACF;AAjDD,8CAiDC","sourcesContent":["import {InjectorService} from \"@tsed/di\";\nimport {RequestContext} from \"../../platform\";\n\nconst onFinished = require(\"on-finished\");\nconst uuidv4 = require(\"uuid/v4\");\n\nconst defaultReqIdBuilder = () => uuidv4().replace(/-/gi, \"\");\n\nexport class ContextMiddleware {\n  level: \"debug\" | \"info\" | \"warn\" | \"error\" | \"off\" | undefined;\n  maxStackSize: number;\n  ignoreUrlPatterns: string[];\n  reqIdBuilder: any;\n\n  constructor(private injector: InjectorService) {\n    const {level, maxStackSize, ignoreUrlPatterns = [], reqIdBuilder = defaultReqIdBuilder} = injector.settings.logger || {};\n\n    this.level = level;\n    this.maxStackSize = maxStackSize!;\n    this.ignoreUrlPatterns = ignoreUrlPatterns;\n    this.reqIdBuilder = reqIdBuilder;\n  }\n\n  static async onClose(err: any, response: any) {\n    const {req: request} = response;\n\n    await request.ctx.emit(\"$onResponse\", request, response);\n    await request.ctx.destroy();\n\n    delete request.ctx;\n    delete request.log;\n  }\n\n  async use(request: any, response: any, next: any) {\n    const {level, ignoreUrlPatterns, maxStackSize} = this;\n\n    const id = this.reqIdBuilder();\n\n    request.ctx = new RequestContext({\n      id,\n      logger: this.injector.logger,\n      url: request.originalUrl || request.url,\n      ignoreUrlPatterns,\n      level,\n      maxStackSize,\n      injector: this.injector\n    });\n\n    // deprecated\n    request.log = request.ctx.logger;\n\n    onFinished(response, ContextMiddleware.onClose);\n\n    await this.injector.emit(\"$onRequest\", request, response);\n\n    next();\n  }\n}\n"]}