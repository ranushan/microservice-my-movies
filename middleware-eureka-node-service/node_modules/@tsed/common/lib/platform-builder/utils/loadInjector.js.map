{"version":3,"file":"loadInjector.js","sourceRoot":"","sources":["../../../src/platform-builder/utils/loadInjector.ts"],"names":[],"mappings":";;;AACA,6CAA8C;AAC9C,uDAAkD;AAElD,SAAsB,YAAY,CAAC,QAAyB,EAAE,YAAuB,iCAAe,EAAE;;QACpG,uCAAuC;QACvC,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAEjC,4BAA4B;QAC5B,QAAQ,CAAC,oBAAoB,EAAE,CAAC;QAEhC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YACvC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,GAAG,KAAK,EAAE,KAAK,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,MAAM,CAAC,yBAAc,CAAC,CAAC;QAEhC,OAAO,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC;CAAA;AAdD,oCAcC","sourcesContent":["import {Container, InjectorService, LocalsContainer} from \"@tsed/di\";\nimport {PlatformModule} from \"../../platform\";\nimport {createContainer} from \"./createContainer\";\n\nexport async function loadInjector(injector: InjectorService, container: Container = createContainer()): Promise<LocalsContainer<any>> {\n  // Clone all providers in the container\n  injector.addProviders(container);\n\n  // Resolve all configuration\n  injector.resolveConfiguration();\n\n  injector.settings.forEach((value, key) => {\n    injector.logger.debug(`settings.${key} =>`, value);\n  });\n\n  injector.invoke(PlatformModule);\n\n  return injector.load(container);\n}\n"]}