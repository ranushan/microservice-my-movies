{"version":3,"file":"importProviders.js","sourceRoot":"","sources":["../../../src/platform-builder/utils/importProviders.ts"],"names":[],"mappings":";;;AAEA,yDAAoD;AAEpD,SAAsB,eAAe,CAAC,QAAyB;;QAC7D,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAEzC,MAAM,SAAS,GAAsB,EAAU,CAAC,MAAM,CACpD,GAAG,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC;YACpB,mCAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC;YACpE,mCAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC;SAC9E,CAAC,CAAC,CACJ,CAAC;QAEF,OAAO,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAC,KAAK,EAAE,KAAK,EAAC,EAAE,EAAE,CAAC,CAAC,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;IAClG,CAAC;CAAA;AAXD,0CAWC","sourcesContent":["import {InjectorService, IProvider} from \"@tsed/di\";\nimport {IRoute} from \"../../platform/interfaces/IRoute\";\nimport {importComponents} from \"./importComponents\";\n\nexport async function importProviders(injector: InjectorService): Promise<IRoute[]> {\n  injector.logger.debug(\"Scan components\");\n\n  const providers: IProvider<any>[] = ([] as any).concat(\n    ...(await Promise.all([\n      importComponents(injector.settings.mount, injector.settings.exclude),\n      importComponents(injector.settings.componentsScan, injector.settings.exclude)\n    ]))\n  );\n\n  return providers.filter(provider => !!provider.route).map(({route, token}) => ({route, token}));\n}\n"]}