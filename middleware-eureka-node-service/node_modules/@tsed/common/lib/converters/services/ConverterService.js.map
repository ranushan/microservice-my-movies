{"version":3,"file":"ConverterService.js","sourceRoot":"","sources":["../../../src/converters/services/ConverterService.ts"],"names":[],"mappings":"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","sourcesContent":["import {getClass, isArrayOrArrayClass, isEmpty, isPrimitiveOrPrimitiveClass, Metadata, Type} from \"@tsed/core\";\nimport {Configuration, Injectable, InjectorService} from \"@tsed/di\";\nimport {IConverterSettings} from \"../../config/interfaces/IConverterSettings\";\nimport {PropertyMetadata} from \"../../jsonschema/class/PropertyMetadata\";\nimport {PropertyRegistry} from \"../../jsonschema/registries/PropertyRegistry\";\nimport {getJsonSchema} from \"../../jsonschema/utils/getJsonSchema\";\nimport {ArrayConverter, DateConverter, MapConverter, PrimitiveConverter, SetConverter, SymbolConverter} from \"../components\";\nimport {CONVERTER} from \"../constants/index\";\nimport {RequiredPropertyError} from \"../errors/RequiredPropertyError\";\nimport {UnknownPropertyError} from \"../errors/UnknownPropertyError\";\nimport {IConverter, IConverterOptions, IDeserializer, ISerializer} from \"../interfaces/index\";\n\n@Injectable({\n  imports: [ArrayConverter, DateConverter, MapConverter, PrimitiveConverter, SetConverter, SymbolConverter]\n})\nexport class ConverterService {\n  private converterSettings: IConverterSettings;\n\n  constructor(private injectorService: InjectorService, @Configuration() configuration: Configuration) {\n    this.converterSettings = configuration.get<IConverterSettings>(\"converter\") || {};\n\n    if (this.converterSettings.additionalProperties === undefined) {\n      const validationModelStrict = configuration.get<boolean>(\"validationModelStrict\");\n      this.converterSettings.additionalProperties = validationModelStrict || validationModelStrict === undefined ? \"error\" : \"accept\";\n    }\n  }\n\n  /**\n   * Return a JsonMetadata for a properties.\n   * @param properties\n   * @param propertyKey\n   * @returns {undefined|V|string|any|T|IDBRequest}\n   */\n  static getPropertyMetadata(\n    properties: Map<string | symbol, PropertyMetadata>,\n    propertyKey: string | symbol\n  ): PropertyMetadata | undefined {\n    if (properties.has(propertyKey)) {\n      return properties.get(propertyKey);\n    }\n\n    let property;\n    properties.forEach(p => {\n      if (p.name === propertyKey || p.propertyKey === propertyKey) {\n        property = p;\n      }\n    });\n\n    return property;\n  }\n\n  /**\n   * Convert instance to plainObject.\n   *\n   * ### Options\n   *\n   * - `checkRequiredValue`: Disable the required check condition.\n   *\n   * @param obj\n   * @param options\n   */\n  serialize(obj: any, options: IConverterOptions = {}): any {\n    if (isEmpty(obj)) {\n      return obj;\n    }\n\n    const converter = this.getConverter(obj);\n    const serializer: ISerializer = (o: any, opt?: any) => this.serialize(o, Object.assign({}, options, opt));\n\n    if (converter && converter.serialize) {\n      // serialize from a custom JsonConverter\n      return converter.serialize(obj, serializer);\n    }\n\n    if (typeof obj.serialize === \"function\") {\n      // serialize from serialize method\n      return obj.serialize(options, this);\n    }\n\n    if (typeof obj.toJSON === \"function\" && !obj.toJSON.$ignore) {\n      // serialize from serialize method\n      return obj.toJSON();\n    }\n\n    // Default converter\n    if (!isPrimitiveOrPrimitiveClass(obj)) {\n      return this.serializeClass(obj, options);\n    }\n\n    /* istanbul ignore next */\n    return obj;\n  }\n\n  /**\n   *\n   * @param obj\n   * @param {IConverterOptions} options\n   * @returns {any}\n   */\n  serializeClass(obj: any, options: IConverterOptions = {}) {\n    const {checkRequiredValue = true, withIgnoredProps} = options;\n\n    const plainObject: any = {};\n    const properties = PropertyRegistry.getProperties(options.type || obj, {withIgnoredProps});\n    const keys = properties.size ? Array.from(properties.keys()) : Object.keys(obj);\n\n    keys.forEach(propertyKey => {\n      if (typeof obj[propertyKey] !== \"function\") {\n        let propertyMetadata = ConverterService.getPropertyMetadata(properties, propertyKey);\n        let propertyValue = obj[propertyKey];\n        propertyMetadata = propertyMetadata || ({} as any);\n\n        propertyValue = this.serialize(propertyValue, {\n          checkRequiredValue,\n          withIgnoredProps,\n          type: propertyMetadata!.type\n        });\n\n        if (typeof propertyMetadata!.onSerialize === \"function\") {\n          propertyValue = propertyMetadata!.onSerialize(propertyValue);\n        }\n\n        plainObject[propertyMetadata!.name || propertyKey] = propertyValue;\n      }\n    });\n\n    return plainObject;\n  }\n\n  /**\n   * Convert a plainObject to targetType.\n   *\n   * ### Options\n   *\n   * - `ignoreCallback`: callback called for each object which will be deserialized. The callback can return a boolean to avoid the default converter behavior.\n   * - `checkRequiredValue`: Disable the required check condition.\n   *\n   * @param obj Object source that will be deserialized\n   * @param targetType Pattern of the object deserialized\n   * @param baseType\n   * @param options\n   * @returns {any}\n   */\n  deserialize(obj: any, targetType: any, baseType?: any, options: IConverterOptions = {}): any {\n    const {ignoreCallback, checkRequiredValue = true} = options;\n\n    if (ignoreCallback && ignoreCallback(obj, targetType, baseType)) {\n      return obj;\n    }\n\n    if (targetType !== Boolean && (isEmpty(obj) || isEmpty(targetType) || targetType === Object)) {\n      return obj;\n    }\n\n    const converter = this.getConverter(targetType);\n    const deserializer: IDeserializer = (o: any, targetType: any, baseType: any) => this.deserialize(o, targetType, baseType, options);\n\n    if (converter) {\n      // deserialize from a custom JsonConverter\n      return converter!.deserialize!(obj, targetType, baseType, deserializer);\n    }\n\n    /* istanbul ignore next */\n    if (isArrayOrArrayClass(obj)) {\n      const converter = this.getConverter(Array);\n\n      return converter!.deserialize!(obj, Array, baseType, deserializer);\n    }\n\n    if ((targetType as any).prototype && typeof (targetType as any).prototype.deserialize === \"function\") {\n      // deserialize from method\n\n      const instance = new targetType();\n      instance.deserialize(obj);\n\n      return instance;\n    }\n\n    // Default converter\n    const instance = new targetType();\n    const properties = PropertyRegistry.getProperties(targetType);\n\n    Object.keys(obj).forEach((propertyName: string) => {\n      const propertyMetadata = ConverterService.getPropertyMetadata(properties, propertyName);\n\n      return this.convertProperty(obj, instance, propertyName, propertyMetadata, options);\n    });\n\n    // Required validation\n    if (checkRequiredValue) {\n      // TODO v6 REMOVE REQUIRED check\n      this.checkRequiredValue(instance, properties);\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param targetType\n   * @returns {any}\n   */\n  getConverter<T extends IConverter>(targetType: any): T | undefined {\n    if (Metadata.has(CONVERTER, targetType)) {\n      const converter = Metadata.get(CONVERTER, targetType);\n\n      if (converter) {\n        return this.injectorService.get(converter);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {Type<any>} target\n   * @returns {\"error\" | \"accept\" | \"ignore\"}\n   */\n  public getAdditionalPropertiesLevel(target: Type<any>) {\n    if (target !== Object) {\n      const {additionalProperties} = getJsonSchema(target);\n\n      if (additionalProperties !== undefined) {\n        return !additionalProperties ? \"error\" : \"accept\";\n      }\n\n      return this.converterSettings.additionalProperties;\n    }\n\n    return \"accept\";\n  }\n\n  /**\n   *\n   * @param obj\n   * @param instance\n   * @param {string} propertyName\n   * @param {PropertyMetadata} propertyMetadata\n   * @param options\n   */\n  private convertProperty(obj: any, instance: any, propertyName: string, propertyMetadata?: PropertyMetadata, options?: any) {\n    if (this.skipAdditionalProperty(instance, propertyName, propertyMetadata, options)) {\n      return;\n    }\n\n    propertyMetadata = propertyMetadata || ({} as any);\n\n    let propertyValue = obj[propertyMetadata!.name] || obj[propertyName];\n    const propertyKey = propertyMetadata!.propertyKey || propertyName;\n\n    if (typeof instance[propertyKey] !== \"function\") {\n      if (typeof propertyMetadata!.onDeserialize === \"function\") {\n        propertyValue = propertyMetadata!.onDeserialize(propertyValue);\n      }\n\n      instance[propertyKey] = this.deserialize(\n        propertyValue,\n        propertyMetadata!.isCollection ? propertyMetadata!.collectionType : propertyMetadata!.type,\n        propertyMetadata!.type,\n        options\n      );\n    }\n  }\n\n  /**\n   * @deprecated\n   * @param instance\n   * @param {Map<string | symbol, PropertyMetadata>} properties\n   */\n  private checkRequiredValue(instance: any, properties: Map<string | symbol, PropertyMetadata>) {\n    properties.forEach((propertyMetadata: PropertyMetadata) => {\n      const value = instance[propertyMetadata.propertyKey];\n      if (propertyMetadata.isRequired(value)) {\n        throw new RequiredPropertyError(getClass(instance), propertyMetadata.propertyKey, value);\n      }\n    });\n  }\n\n  /**\n   *\n   * @param instance\n   * @param {string} propertyKey\n   * @param {PropertyMetadata | undefined} propertyMetadata\n   * @param options\n   */\n  private skipAdditionalProperty(\n    instance: any,\n    propertyKey: string | symbol,\n    propertyMetadata: PropertyMetadata | undefined,\n    options: any\n  ) {\n    if (propertyMetadata !== undefined) {\n      return false;\n    }\n\n    const additionalPropertiesLevel = options.additionalProperties || this.getAdditionalPropertiesLevel(getClass(instance));\n\n    switch (additionalPropertiesLevel) {\n      case \"error\":\n        throw new UnknownPropertyError(getClass(instance), propertyKey);\n      case \"ignore\":\n        return true;\n      case \"accept\":\n        return false;\n    }\n  }\n}\n"]}