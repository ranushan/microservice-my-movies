{"version":3,"file":"PrimitiveConverter.js","sourceRoot":"","sources":["../../../src/converters/components/PrimitiveConverter.ts"],"names":[],"mappings":";;;AAAA,sEAAiE;AACjE,uDAAkD;AAGlD;;;;GAIG;AAEH,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAC7B,WAAW,CAAC,IAAY,EAAE,MAAW;QACnC,QAAQ,MAAM,EAAE;YACd,KAAK,MAAM;gBACT,OAAO,EAAE,GAAG,IAAI,CAAC;YAEnB,KAAK,MAAM;gBACT,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAE/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;gBAEhB,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;oBACZ,MAAM,IAAI,iCAAe,CAAC,+CAA+C,EAAE,EAAE,CAAC,CAAC;iBAChF;gBAED,OAAO,CAAC,CAAC;YAEX,KAAK,OAAO;gBACV,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAAE,OAAO,IAAI,CAAC;gBACpD,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAAE,OAAO,KAAK,CAAC;gBACvD,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC/C,IAAI,IAAI,KAAK,SAAS;oBAAE,OAAO,SAAS,CAAC;gBAEzC,OAAO,CAAC,CAAC,IAAI,CAAC;SACjB;IACH,CAAC;IAED,SAAS,CAAC,MAAiC;QACzC,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAA;AA9BY,kBAAkB;IAD9B,qBAAS,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC;GACtB,kBAAkB,CA8B9B;AA9BY,gDAAkB","sourcesContent":["import {ValidationError} from \"../../mvc/errors/ValidationError\";\nimport {Converter} from \"../decorators/converter\";\nimport {IConverter} from \"../interfaces/index\";\n\n/**\n * Converter component for the `String`, `Number` and `Boolean` Types.\n * @converters\n * @component\n */\n@Converter(String, Number, Boolean)\nexport class PrimitiveConverter implements IConverter {\n  deserialize(data: string, target: any): String | Number | Boolean | void | null {\n    switch (target) {\n      case String:\n        return \"\" + data;\n\n      case Number:\n        if ([null, \"null\"].includes(data)) return null;\n\n        const n = +data;\n\n        if (isNaN(n)) {\n          throw new ValidationError(\"Cast error. Expression value is not a number.\", []);\n        }\n\n        return n;\n\n      case Boolean:\n        if ([\"true\", \"1\", true].includes(data)) return true;\n        if ([\"false\", \"0\", false].includes(data)) return false;\n        if ([null, \"null\"].includes(data)) return null;\n        if (data === undefined) return undefined;\n\n        return !!data;\n    }\n  }\n\n  serialize(object: String | Number | Boolean): any {\n    return object;\n  }\n}\n"]}