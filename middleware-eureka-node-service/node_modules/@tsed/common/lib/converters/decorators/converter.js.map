{"version":3,"file":"converter.js","sourceRoot":"","sources":["../../../src/converters/decorators/converter.ts"],"names":[],"mappings":";;AAAA,qCAAoC;AACpC,8CAA6C;AAC7C,2EAAoE;AAEpE;;;;;;;GAOG;AACH,SAAgB,SAAS,CAAC,GAAG,OAAc;IACzC,OAAO,CAAC,MAAW,EAAE,EAAE;QACrB,0BAA0B;QAC1B,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,6EAA6E,CAAC,CAAC;SAChG;QAED,uCAAiB,CAAC;YAChB,OAAO,EAAE,MAAM;YACf,IAAI,EAAE,WAAW;SAClB,CAAC,CAAC;QAEH,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,eAAQ,CAAC,GAAG,CAAC,iBAAS,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;IACnE,CAAC,CAAC;AACJ,CAAC;AAdD,8BAcC","sourcesContent":["import {Metadata} from \"@tsed/core\";\nimport {CONVERTER} from \"../constants/index\";\nimport {registerConverter} from \"../registries/ConverterRegistries\";\n\n/**\n * `@Converter(...targetTypes)` let you to define some converters for a certain type/Class.\n * It useful for a generic conversion.\n *\n * @param classes\n * @returns {(customConverter?:any)=>undefined}\n * @decorator\n */\nexport function Converter(...classes: any[]): Function {\n  return (target: any) => {\n    /* istanbul ignore next */\n    if (classes.length === 0) {\n      throw new Error(\"Converter decorator need at least one type like String, Date, Class, etc...\");\n    }\n\n    registerConverter({\n      provide: target,\n      type: \"converter\"\n    });\n\n    classes.forEach(clazz => Metadata.set(CONVERTER, target, clazz));\n  };\n}\n"]}