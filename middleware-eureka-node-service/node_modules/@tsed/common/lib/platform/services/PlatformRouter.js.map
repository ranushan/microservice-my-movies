{"version":3,"file":"PlatformRouter.js","sourceRoot":"","sources":["../../../src/platform/services/PlatformRouter.ts"],"names":[],"mappings":";;;;AAAA,iCAAoE;AACpE,mDAAoD;AACpD,qDAAgD;AAChD,uDAAkD;AAErC,QAAA,uBAAuB,GAAG,MAAM,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;AAY3E,IAAa,cAAc,sBAA3B,MAAa,cAAe,SAAQ,+BAA2B;IAC7D,YAAY,QAAyB;QACnC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAEhB,IAAI,CAAC,GAAG,GAAG,gBAAc,CAAC,eAAe,EAAE,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,MAAM,CAAC,QAAyB,EAAE,aAAkB;QACzD,MAAM,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QACzB,MAAM,CAAC,GAAG,CAAC,+BAAuB,EAAE,aAAa,CAAC,CAAC;QAEnD,OAAO,QAAQ,CAAC,MAAM,CAAiB,gBAAc,EAAE,MAAM,CAAC,CAAC;IACjE,CAAC;IAES,MAAM,CAAC,eAAe;QAC9B,OAAO,mCAAmB,EAAE,CAAC;IAC/B,CAAC;CACF,CAAA;AAtBY,cAAc;IAH1B,eAAU,CAAC;QACV,KAAK,EAAE,kBAAa,CAAC,QAAQ;KAC9B,CAAC;6CAEsB,iCAAe;GAD1B,cAAc,CAsB1B;AAtBY,wCAAc","sourcesContent":["import {Injectable, InjectorService, ProviderScope} from \"@tsed/di\";\nimport {createFakeRawDriver} from \"./FakeRawDriver\";\nimport {PlatformDriver} from \"./PlatformDriver\";\nimport {PlatformHandler} from \"./PlatformHandler\";\n\nexport const PLATFORM_ROUTER_OPTIONS = Symbol.for(\"PlatformRouterOptions\");\n\ndeclare global {\n  namespace TsED {\n    export interface Router {\n    }\n  }\n}\n\n@Injectable({\n  scope: ProviderScope.INSTANCE\n})\nexport class PlatformRouter extends PlatformDriver<TsED.Router> {\n  constructor(platform: PlatformHandler) {\n    super(platform);\n\n    this.raw = PlatformRouter.createRawRouter();\n  }\n\n  /**\n   * Create a new instance of PlatformRouter\n   * @param injector\n   * @param routerOptions\n   */\n  static create(injector: InjectorService, routerOptions: any) {\n    const locals = new Map();\n    locals.set(PLATFORM_ROUTER_OPTIONS, routerOptions);\n\n    return injector.invoke<PlatformRouter>(PlatformRouter, locals);\n  }\n\n  protected static createRawRouter(): any {\n    return createFakeRawDriver();\n  }\n}\n"]}