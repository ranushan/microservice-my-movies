{"version":3,"file":"RequestContext.js","sourceRoot":"","sources":["../../../src/platform/domain/RequestContext.ts"],"names":[],"mappings":";;;AAAA,iCAA0D;AAE1D,mDAA8C;AAY9C,MAAa,cAAe,SAAQ,GAAa;IAiD/C,YAAY,EAA0D;YAA1D,EAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAqC,EAAnC,0DAAU;QAC3C,KAAK,EAAE,CAAC;QAxBV;;WAEG;QACM,cAAS,GAAS,IAAI,IAAI,EAAE,CAAC;QACtC;;WAEG;QACI,cAAS,GAAG,IAAI,oBAAe,EAAO,CAAC;QAkB5C,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QAEb,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAC;QAEvC,IAAI,CAAC,MAAM,GAAG,IAAI,6BAAa,CAAC,MAAM,kBACpC,EAAE,EACF,SAAS,EAAE,IAAI,CAAC,SAAS,IACtB,OAAO,EACV,CAAC;IACL,CAAC;IAEK,OAAO;;YACX,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;YAC/B,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACtB,OAAO,IAAI,CAAC,SAAS,CAAC;YACtB,OAAO,IAAI,CAAC,MAAM,CAAC;YACnB,OAAO,IAAI,CAAC,QAAQ,CAAC;YACrB,OAAO,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;KAAA;IAEK,IAAI,CAAC,SAAiB,EAAE,GAAG,IAAW;;YAC1C,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,CAAC;QACjE,CAAC;KAAA;CACF;AA1ED,wCA0EC","sourcesContent":["import {InjectorService, LocalsContainer} from \"@tsed/di\";\nimport {EndpointMetadata} from \"../../mvc\";\nimport {RequestLogger} from \"./RequestLogger\";\n\nexport interface IRequestContextOptions {\n  id: string;\n  logger: any;\n  url: string;\n  ignoreUrlPatterns?: any[];\n  level?: \"debug\" | \"info\" | \"warn\" | \"error\" | \"off\";\n  maxStackSize?: number;\n  injector?: InjectorService;\n}\n\nexport class RequestContext extends Map<any, any> {\n  /**\n   * Request id generated by @@contextMiddleware@@.\n   *\n   * ::: tip\n   * By default Ts.ED generate uuid like that `uuidv4().replace(/-/gi, \"\"))`.\n   * Dash are removed to simplify tracking logs in Kibana\n   * :::\n   *\n   * ::: tip\n   * Request id can by customized by changing the server configuration.\n   *\n   * ```typescript\n   * @ServerSettings({\n   *   logger: {\n   *     reqIdBuilder: createUniqId // give your own id generator function\n   *   }\n   * })\n   * class Server {\n   *\n   * }\n   * ```\n   * :::\n   *\n   */\n  readonly id: string;\n  /**\n   * Date when request have been handled by the server. @@RequestLogger@@ use this date to log request duration.\n   */\n  readonly dateStart: Date = new Date();\n  /**\n   * The request container used by the Ts.ED DI. It contain all services annotated with `@Scope(ProviderScope.REQUEST)`\n   */\n  public container = new LocalsContainer<any>();\n  /**\n   * The current @@EndpointMetadata@@ resolved by Ts.ED during the request.\n   */\n  public endpoint: EndpointMetadata;\n  /**\n   * The data return by the previous endpoint if you use multiple handler on the same route. By default data is empty.\n   */\n  public data: any;\n  /**\n   * Logger attached to the context request.\n   */\n  public logger: RequestLogger;\n\n  public injector: InjectorService;\n\n  constructor({id, injector, logger, ...options}: IRequestContextOptions) {\n    super();\n    this.id = id;\n\n    injector && (this.injector = injector);\n\n    this.logger = new RequestLogger(logger, {\n      id,\n      startDate: this.dateStart,\n      ...options\n    });\n  }\n\n  async destroy() {\n    await this.container.destroy();\n    this.logger.destroy();\n    delete this.container;\n    delete this.logger;\n    delete this.injector;\n    delete this.endpoint;\n  }\n\n  async emit(eventName: string, ...args: any[]) {\n    return this.injector && this.injector.emit(eventName, ...args);\n  }\n}\n"]}