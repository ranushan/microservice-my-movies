{"version":3,"file":"HandlerContext.js","sourceRoot":"","sources":["../../../src/platform/domain/HandlerContext.ts"],"names":[],"mappings":"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","sourcesContent":["import {isFunction, isPromise, isStream} from \"@tsed/core\";\nimport {InjectorService} from \"@tsed/di\";\nimport {isObservable} from \"rxjs\";\nimport {HandlerMetadata} from \"../../mvc/models/HandlerMetadata\";\nimport {IHandlerContext} from \"../interfaces/IHandlerContext\";\n\nconst isFinish = (request: TsED.Request, response: TsED.Response) => {\n  if (!response || !request) {\n    return true;\n  }\n\n  return request.aborted || response.headersSent || response.writableEnded || response.writableFinished;\n};\n\nfunction isResponse(obj: any) {\n  return obj.data && obj.headers && obj.status && obj.statusText;\n}\n\nexport class HandlerContext {\n  public injector: InjectorService;\n  public metadata: HandlerMetadata;\n  public request: TsED.Request;\n  public response: TsED.Response;\n  public err: any;\n  public args: any[];\n  private _isDone: boolean = false;\n  private _next: any;\n\n  constructor({injector, request, response, next, err, metadata, args}: IHandlerContext) {\n    this.injector = injector!;\n    this.request = request;\n    this.response = response;\n    this._next = next;\n    this.err = err;\n    this.metadata = metadata!;\n    this.args = args || [];\n\n    this.next = this.next.bind(this);\n  }\n\n  get isDone(): boolean {\n    const {response, request} = this;\n\n    // @ts-ignore\n    if (!this._isDone && isFinish(request, response)) {\n      this.destroy();\n    }\n\n    return this._isDone;\n  }\n\n  get container() {\n    return this.request?.ctx?.container;\n  }\n\n  done(error: any, result?: any) {\n    if (this.isDone) {\n      return;\n    }\n\n    const {\n      metadata: {hasNextFunction},\n      request: {ctx}\n    } = this;\n\n    if (error) {\n      return this.next(error);\n    }\n\n    if (!hasNextFunction) {\n      if (!result !== undefined) {\n        ctx.data = result;\n      }\n      this.next();\n    }\n  }\n\n  handle(process: any): any {\n    if (this.isDone) {\n      return;\n    }\n\n    const {\n      metadata: {hasNextFunction},\n      request,\n      response,\n      next\n    } = this;\n\n    if (process) {\n      if (process === response) {\n        // ABANDON\n        this.destroy();\n\n        return;\n      }\n\n      if (isObservable(process)) {\n        process = process.toPromise();\n      }\n\n      if (isResponse(process)) {\n        response.set(process.headers);\n        response.status(process.status);\n\n        return this.handle(process.data);\n      }\n\n      if (isStream(process) || Buffer.isBuffer(process)) {\n        return this.done(null, process);\n      }\n\n      if (isFunction(process)) {\n        // when process return a middleware\n        return process(request, response, next.bind(this));\n      }\n\n      if (isPromise(process)) {\n        return process.then((result: any) => this.handle(result)).catch((error: any) => this.done(error));\n      }\n    }\n\n    if (!hasNextFunction) {\n      // no next function and empty response\n      this.done(null, process);\n    }\n  }\n\n  /**\n   *\n   */\n  async callHandler() {\n    if (this.isDone) {\n      return;\n    }\n\n    const {token, propertyKey} = this.metadata;\n\n    const instance: any = this.injector.invoke(token, this.container);\n    const handler = instance[propertyKey!].bind(instance);\n\n    await this.handle(handler(...this.args));\n  }\n\n  next(error?: any) {\n    const {_next: next} = this;\n\n    this.destroy();\n\n    return next && next(error);\n  }\n\n  destroy() {\n    delete this.request;\n    delete this.response;\n    delete this.args;\n    delete this._next;\n    delete this.metadata;\n    delete this.injector;\n    delete this.err;\n    this._isDone = true;\n  }\n}\n"]}