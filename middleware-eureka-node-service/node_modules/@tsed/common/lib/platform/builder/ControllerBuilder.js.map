{"version":3,"file":"ControllerBuilder.js","sourceRoot":"","sources":["../../../src/platform/builder/ControllerBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {InjectorService} from \"@tsed/di\";\nimport {IPathMethod} from \"../../mvc/interfaces/IPathMethod\";\nimport {EndpointMetadata} from \"../../mvc/models/EndpointMetadata\";\nimport {ControllerProvider} from \"../domain/ControllerProvider\";\nimport {IPlatformDriver} from \"../interfaces/IPlatformDriver\";\nimport {bindEndpointMiddleware} from \"../middlewares/bindEndpointMiddleware\";\nimport {SendResponseMiddleware} from \"../middlewares/SendResponseMiddleware\";\nimport {statusAndHeadersMiddleware} from \"../middlewares/statusAndHeadersMiddleware\";\nimport {PlatformRouter} from \"../services/PlatformRouter\";\n\nexport class ControllerBuilder {\n  constructor(private provider: ControllerProvider) {}\n\n  /**\n   *\n   * @returns {any}\n   */\n  public build(injector: InjectorService): IPlatformDriver {\n    const {\n      routerOptions,\n      middlewares: {useBefore, useAfter}\n    } = this.provider;\n\n    this.provider.router = PlatformRouter.create(injector, routerOptions);\n    // Controller lifecycle\n    this.buildMiddlewares(useBefore) // Controller before-middleware\n      .buildEndpoints() // All endpoints and his middlewares\n      .buildMiddlewares(useAfter) // Controller after-middleware\n      .buildChildrenCtrls(injector); // Children controllers\n\n    return this.provider.router;\n  }\n\n  private buildEndpoints() {\n    const {endpoints} = this.provider;\n    const pathsMethodsMap: Map<string, IPathMethod> = new Map();\n    const getKey = (method: string, path: any) => `${method}-${path}`;\n\n    const updateFinalRouteState = (key: string) => {\n      if (pathsMethodsMap.has(key)) {\n        pathsMethodsMap.get(key)!.isFinal = false;\n      }\n    };\n\n    const setFinalRoute = (key: string, pathMethod: IPathMethod) => {\n      pathsMethodsMap.set(key, pathMethod);\n      pathMethod.isFinal = true;\n    };\n    endpoints.forEach(({pathsMethods}) => {\n      pathsMethods.forEach(pathMethod => {\n        pathMethod.method = pathMethod.method || \"use\";\n\n        if (pathMethod.method !== \"use\") {\n          const key = getKey(pathMethod.method, pathMethod.path);\n          updateFinalRouteState(key);\n          updateFinalRouteState(getKey(\"all\", pathMethod.path));\n\n          setFinalRoute(key, pathMethod);\n        }\n      });\n    });\n\n    endpoints.forEach(endpoint => {\n      this.buildEndpoint(endpoint);\n    });\n\n    return this;\n  }\n\n  private buildEndpoint(endpoint: EndpointMetadata) {\n    const {beforeMiddlewares, middlewares: mldwrs, afterMiddlewares, pathsMethods} = endpoint;\n    const {\n      router,\n      middlewares: {use}\n    } = this.provider;\n    // Endpoint lifecycle\n    let handlers: any[] = [];\n\n    handlers = handlers\n      .concat(bindEndpointMiddleware(endpoint))\n      .concat(use) // Controller use-middlewares\n      .concat(beforeMiddlewares) // Endpoint before-middlewares\n      .concat(mldwrs) // Endpoint middlewares\n      .concat(endpoint) // Endpoint metadata\n      .concat(statusAndHeadersMiddleware)\n      .concat(afterMiddlewares) // Endpoint after-middlewares\n      .filter((item: any) => !!item);\n\n    // Add handlers to the router\n    pathsMethods.forEach(({path, method, isFinal}) => {\n      const localHandlers = isFinal ? handlers.concat(SendResponseMiddleware) : handlers;\n\n      router.addRoute({method: method!, path, handlers: localHandlers});\n    });\n\n    if (!pathsMethods.length) {\n      router.use(...handlers);\n    }\n  }\n\n  private buildChildrenCtrls(injector: InjectorService) {\n    const {children, router} = this.provider;\n\n    children.forEach((child: Type<any>) => {\n      const provider = injector.getProvider(child) as ControllerProvider;\n\n      /* istanbul ignore next */\n      if (!provider) {\n        throw new Error(\"Controller component not found in the ControllerRegistry\");\n      }\n\n      new ControllerBuilder(provider).build(injector);\n\n      router.use(provider.path, provider.router);\n    });\n  }\n\n  private buildMiddlewares(middlewares: any[]) {\n    const {router} = this.provider;\n\n    middlewares\n      .filter(o => typeof o === \"function\")\n      .forEach((middleware: any) => {\n        router.use(middleware);\n      });\n\n    return this;\n  }\n}\n"]}