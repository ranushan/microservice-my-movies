{"version":3,"file":"useParam.js","sourceRoot":"","sources":["../../../../src/mvc/decorators/params/useParam.ts"],"names":[],"mappings":";;AAAA,qCAAiD;AAIjD,uCAAkC;AAClC,6DAAwD;AACxD,6DAAwD;AACxD,iDAA4C;AAC5C,uCAAkC;AAClC,mDAA8C;AAE9C,SAAS,QAAQ,CAAC,UAA8B,EAAE;IAChD,OAAO;QACL,OAAO,CAAC,OAAO,IAAI,iBAAO,CAAC,OAAO,CAAC,OAAO,CAAC;QAC3C,OAAO,CAAC,UAAU,IAAI,uCAAkB,CAAC,OAAO,CAAC,UAAU,CAAC;QAC5D,OAAO,CAAC,aAAa,IAAI,6BAAa,EAAE;QACxC,OAAO,CAAC,YAAY,IAAI,uCAAkB,EAAE;KAC7C,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;GAaG;AACH,SAAgB,QAAQ,CAAC,SAA8B,EAAE,UAA8B,EAAE;IACvF,OAAO,sBAAe,CAAC,2BAAY,CAAC,SAAS,CAAC,EAAE,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAuB,CAAC;AAC9F,CAAC;AAFD,4BAEC;AAED;;;;;;GAMG;AACH,SAAgB,SAAS,CAAC,KAA0C,EAAE,UAA8B,EAAE;IACpG,IAAI,MAAW,CAAC;IAChB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,CAAC,SAAS,GAAG,KAAK,CAAC;KAC3B;SAAM;QACL,MAAM,GAAG,KAAK,CAAC;KAChB;IAED,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,SAAS,CAC9B,sBAAe,CACb,MAAM;QACJ,iBAAO,CAAC,KAAK,CAAC,EAAE;YACd,aAAa;YACb,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;QACxB,CAAC,CAAC,EACJ,OAAO,CAAC,SAAS,IAAI,2BAAY,CAAC,OAAO,CAAC,SAAS,CAAC,EACpD,GAAG,QAAQ,CAAC,OAAO,CAAC,CACrB,EACD,+CAA+C,CAChD,CAAC;AACJ,CAAC;AApBD,8BAoBC","sourcesContent":["import {applyDecorators, Type} from \"@tsed/core\";\nimport {IFilter} from \"../../interfaces/IFilter\";\nimport {IParamOptions} from \"../../interfaces/IParamOptions\";\nimport {ParamTypes} from \"../../models/ParamTypes\";\nimport {ParamFn} from \"./paramFn\";\nimport {UseDeserialization} from \"./useDeserialization\";\nimport {UseParamExpression} from \"./useParamExpression\";\nimport {UseParamType} from \"./useParamType\";\nimport {UseType} from \"./useType\";\nimport {UseValidation} from \"./useValidation\";\n\nfunction mapPipes(options: IParamOptions<any> = {}) {\n  return [\n    options.useType && UseType(options.useType),\n    options.expression && UseParamExpression(options.expression),\n    options.useValidation && UseValidation(),\n    options.useConverter && UseDeserialization()\n  ];\n}\n\n/**\n * Register a new param. It use the paramType to extract value and give it to the next pipe.\n *\n * Given options allow to enable or disable following pipes:\n *\n * - useType: Add extra type for the json mapper,\n * - expression: Get property from the returned value by the previous pipe.\n * - useValidation: Apply validation from the returned value by the previous pipe.\n * - useConverter: Apply json mapper from the returned value by the previous pipe.\n *\n * @param paramType\n * @param options\n * @decorator\n */\nexport function UseParam(paramType: ParamTypes | string, options: IParamOptions<any> = {}): ParameterDecorator {\n  return applyDecorators(UseParamType(paramType), ...mapPipes(options)) as ParameterDecorator;\n}\n\n/**\n * Register a new param\n * @param token\n * @param options\n * @decorator\n * @deprecated Use UseParam instead\n */\nexport function UseFilter(token: Type<IFilter> | ParamTypes | string, options: IParamOptions<any> = {}): ParameterDecorator {\n  let filter: any;\n  if (typeof token === \"string\") {\n    options.paramType = token;\n  } else {\n    filter = token;\n  }\n\n  return require(\"util\").deprecate(\n    applyDecorators(\n      filter &&\n        ParamFn(param => {\n          // deprecated\n          param.filter = filter;\n        }),\n      options.paramType && UseParamType(options.paramType),\n      ...mapPipes(options)\n    ),\n    \"UseFilter is deprecated. Use UseParam instead\"\n  );\n}\n"]}