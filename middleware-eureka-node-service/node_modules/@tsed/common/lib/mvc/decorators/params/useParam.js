"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@tsed/core");
const paramFn_1 = require("./paramFn");
const useDeserialization_1 = require("./useDeserialization");
const useParamExpression_1 = require("./useParamExpression");
const useParamType_1 = require("./useParamType");
const useType_1 = require("./useType");
const useValidation_1 = require("./useValidation");
function mapPipes(options = {}) {
    return [
        options.useType && useType_1.UseType(options.useType),
        options.expression && useParamExpression_1.UseParamExpression(options.expression),
        options.useValidation && useValidation_1.UseValidation(),
        options.useConverter && useDeserialization_1.UseDeserialization()
    ];
}
/**
 * Register a new param. It use the paramType to extract value and give it to the next pipe.
 *
 * Given options allow to enable or disable following pipes:
 *
 * - useType: Add extra type for the json mapper,
 * - expression: Get property from the returned value by the previous pipe.
 * - useValidation: Apply validation from the returned value by the previous pipe.
 * - useConverter: Apply json mapper from the returned value by the previous pipe.
 *
 * @param paramType
 * @param options
 * @decorator
 */
function UseParam(paramType, options = {}) {
    return core_1.applyDecorators(useParamType_1.UseParamType(paramType), ...mapPipes(options));
}
exports.UseParam = UseParam;
/**
 * Register a new param
 * @param token
 * @param options
 * @decorator
 * @deprecated Use UseParam instead
 */
function UseFilter(token, options = {}) {
    let filter;
    if (typeof token === "string") {
        options.paramType = token;
    }
    else {
        filter = token;
    }
    return require("util").deprecate(core_1.applyDecorators(filter &&
        paramFn_1.ParamFn(param => {
            // deprecated
            param.filter = filter;
        }), options.paramType && useParamType_1.UseParamType(options.paramType), ...mapPipes(options)), "UseFilter is deprecated. Use UseParam instead");
}
exports.UseFilter = UseFilter;
//# sourceMappingURL=useParam.js.map