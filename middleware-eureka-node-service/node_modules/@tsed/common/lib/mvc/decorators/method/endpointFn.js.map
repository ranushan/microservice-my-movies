{"version":3,"file":"endpointFn.js","sourceRoot":"","sources":["../../../../src/mvc/decorators/method/endpointFn.ts"],"names":[],"mappings":";;AAAA,qCAAuE;AAEvE,wEAAmE;AAEnE;;;;GAIG;AACH,SAAgB,UAAU,CAAC,EAAyE;IAClG,OAAO,CAAI,MAAiB,EAAE,QAAgB,EAAE,UAAsC,EAAqC,EAAE;QAC3H,IAAI,uBAAgB,CAAC,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC,KAAK,QAAQ,EAAE;YACjE,EAAE,CAAC,mCAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,QAAS,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;YAE5E,OAAO,UAAU,CAAC;SACnB;IACH,CAAC,CAAC;AACJ,CAAC;AARD,gCAQC","sourcesContent":["import {DecoratorParameters, getDecoratorType, Type} from \"@tsed/core\";\nimport {EndpointMetadata} from \"../../models/EndpointMetadata\";\nimport {EndpointRegistry} from \"../../registries/EndpointRegistry\";\n\n/**\n *\n * @param fn\n * @decorator\n */\nexport function EndpointFn(fn: (endpoint: EndpointMetadata, parameters: DecoratorParameters) => void) {\n  return <T>(target: Type<any>, property: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> | void => {\n    if (getDecoratorType([target, property, descriptor]) === \"method\") {\n      fn(EndpointRegistry.get(target, property!), [target, property, descriptor]);\n\n      return descriptor;\n    }\n  };\n}\n"]}