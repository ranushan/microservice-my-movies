{"version":3,"file":"status.js","sourceRoot":"","sources":["../../../../src/mvc/decorators/method/status.ts"],"names":[],"mappings":";;AAAA,6CAAwC;AAExC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AACH,SAAgB,MAAM,CAAC,IAAY,EAAE,UAAyC,EAAE;IAC9E,MAAM,EAAC,GAAG,EAAE,UAAU,EAAC,GAAG,OAAc,CAAC;IAEzC,OAAO,uBAAU,iCACZ,OAAO,KACV,IAAI,EACJ,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,GAAG,EACzB,cAAc,EAAE,OAAO,CAAC,cAAc,IAAI,UAAU,IACpD,CAAC;AACL,CAAC;AATD,wBASC","sourcesContent":["import {ReturnType} from \"./returnType\";\n\n/**\n * Set the HTTP status for the response. It is a chainable alias of Nodeâ€™s `response.statusCode`.\n *\n * ```typescript\n * @Status(204)\n * async myMethod() {}\n * ```\n *\n * With swagger description:\n *\n * ```typescript\n * @Status(204, {\n *   type: Model\n *   description: \"Description\"\n * })\n * @Header('Content-Type', 'application-json')\n * async myMethod() {\n * }\n * ```\n *\n * This example will produce the swagger responses object:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"404\": {\n *       \"description\": \"Description\",\n *       \"headers\": {\n *          \"Content-Type\": {\n *             \"type\": \"string\"\n *          }\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param code\n * @param options\n * @returns {Function}\n * @decorator\n * @endpoint\n */\nexport function Status(code: number, options: Partial<TsED.ResponseOptions> = {}) {\n  const {use, collection} = options as any;\n\n  return ReturnType({\n    ...options,\n    code,\n    type: options.type || use,\n    collectionType: options.collectionType || collection\n  });\n}\n"]}