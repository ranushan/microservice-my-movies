{"version":3,"file":"header.js","sourceRoot":"","sources":["../../../../src/mvc/decorators/method/header.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AAErC,6CAAwC;AAQxC,SAAgB,UAAU,CAAC,OAAwB;IACjD,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAmB,CAAC,UAA4B,EAAE,GAAW,EAAE,KAAa,EAAE,KAAe,EAAE,EAAE;QACjI,MAAM,KAAK,GAAQ,OAAO,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,IAAI,GAAG,OAAO,KAAK,CAAC;QACxB,IAAI,OAAO,GAAQ;YACjB,KAAK;SACN,CAAC;QAEF,IAAI,IAAI,KAAK,QAAQ,EAAE;YACrB,OAAO,GAAG,KAAK,CAAC;YAChB,IAAI,GAAG,OAAO,OAAO,CAAC,KAAK,CAAC;SAC7B;QAED,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC;QAEpC,UAAU,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;QAE1B,OAAO,UAAU,CAAC;IACpB,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC;AAnBD,gCAmBC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgDG;AACH,SAAgB,MAAM,CAAC,UAA6C,EAAE,WAA4B;IAChG,IAAI,WAAW,KAAK,SAAS,EAAE;QAC7B,UAAU,GAAG,EAAC,CAAC,UAAoB,CAAC,EAAE,WAAW,EAAC,CAAC;KACpD;IACD,MAAM,OAAO,GAAqB,UAAU,CAAC,UAA6B,CAAC,CAAC;IAE5E,OAAO,uBAAU,CAAC,QAAQ,CAAC,EAAE;QAC3B,MAAM,EAAC,QAAQ,EAAC,GAAG,QAAQ,CAAC;QAE5B,QAAQ,CAAC,OAAO,GAAG,gBAAS,CAAC,QAAQ,CAAC,OAAO,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;AACL,CAAC;AAXD,wBAWC","sourcesContent":["import {deepMerge} from \"@tsed/core\";\nimport {IResponseHeader, IResponseHeaders} from \"../../interfaces\";\nimport {EndpointFn} from \"./endpointFn\";\n\nexport type IHeaderOptions = string | number | IResponseHeader;\n\nexport interface IHeadersOptions {\n  [key: string]: IHeaderOptions;\n}\n\nexport function mapHeaders(headers: IHeadersOptions): IResponseHeaders {\n  return Object.keys(headers).reduce<IResponseHeaders>((newHeaders: IResponseHeaders, key: string, index: number, array: string[]) => {\n    const value: any = headers[key];\n    let type = typeof value;\n    let options: any = {\n      value\n    };\n\n    if (type === \"object\") {\n      options = value;\n      type = typeof options.value;\n    }\n\n    options.type = options.type || type;\n\n    newHeaders[key] = options;\n\n    return newHeaders;\n  }, {});\n}\n\n/**\n * Sets the responseâ€™s HTTP header field to value. To set multiple fields at once, pass an object as the parameter.\n *\n * ```typescript\n * @Header('Content-Type', 'text/plain');\n * private myMethod() {}\n *\n * @Status(204)\n * @Header({\n *   \"Content-Type\": \"text/plain\",\n *   \"Content-Length\": 123,\n *   \"ETag\": {\n *     \"value\": \"12345\",\n *     \"description\": \"header description\"\n *   }\n * })\n * private myMethod() {}\n * ```\n *\n * This example will produce the swagger responses object:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"204\": {\n *       \"description\": \"Description\",\n *       \"headers\": {\n *          \"Content-Type\": {\n *             \"type\": \"string\"\n *          },\n *          \"Content-Length\": {\n *             \"type\": \"number\"\n *          },\n *          \"ETag\": {\n *             \"type\": \"string\",\n *             \"description\": \"header description\"\n *          }\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param headerName\n * @param headerValue\n * @returns {Function}\n * @decorator\n * @endpoint\n */\nexport function Header(headerName: string | number | IHeadersOptions, headerValue?: IHeaderOptions): Function {\n  if (headerValue !== undefined) {\n    headerName = {[headerName as string]: headerValue};\n  }\n  const headers: IResponseHeaders = mapHeaders(headerName as IHeadersOptions);\n\n  return EndpointFn(endpoint => {\n    const {response} = endpoint;\n\n    response.headers = deepMerge(response.headers || {}, headers);\n  });\n}\n"]}