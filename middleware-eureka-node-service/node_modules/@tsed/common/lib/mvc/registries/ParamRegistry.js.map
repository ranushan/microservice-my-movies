{"version":3,"file":"ParamRegistry.js","sourceRoot":"","sources":["../../../src/mvc/registries/ParamRegistry.ts"],"names":[],"mappings":";;AAAA,qCAA0C;AAC1C,4CAA4C;AAE5C,2DAAuF;AAEvF,gEAA2D;AAC3D,sEAAiE;AACjE,4DAAuD;AAIvD,MAAa,aAAa;IACxB,MAAM,CAAC,GAAG,CAAC,MAAiB,EAAE,WAA4B,EAAE,KAAa;QACvE,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAEnD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,KAAK,CAAC,EAAE;YACzC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,6BAAa,CAAC,EAAC,MAAM,EAAE,WAAW,EAAE,KAAK,EAAC,CAAC,CAAC;YAChE,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SACrD;QAED,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,MAAiB,EAAE,WAA4B,EAAE,KAAa;QACvE,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,MAAiB,EAAE,WAA4B,EAAE,KAAa,EAAE,aAA4B;QACrG,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAEnD,MAAM,CAAC,KAAK,CAAC,GAAG,aAAa,CAAC;QAE9B,eAAQ,CAAC,GAAG,CAAC,0BAAc,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;IAC5D,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,MAAiB,EAAE,WAA4B;QAC9D,OAAO,eAAQ,CAAC,GAAG,CAAC,0BAAc,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,eAAQ,CAAC,GAAG,CAAC,0BAAc,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACpH,CAAC;IAED;;;;OAIG;IACH,0BAA0B;IAC1B,MAAM,CAAC,SAAS,CAAC,MAAuC,EAAE,OAA0B;QAClF,MAAM,EAAC,UAAU,EAAE,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,aAAa,EAAC,GAAG,OAAO,CAAC;QAC/F,IAAI,EAAC,SAAS,EAAC,GAAG,OAAO,CAAC;QAE1B,MAAM,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,MAAO,EAAE,WAAY,EAAE,KAAK,CAAC,CAAC;QAE9D,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,SAAS,GAAG,MAAoB,CAAC;SAClC;aAAM;YACL,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;SACvB;QAED,KAAK,CAAC,UAAU,GAAG,UAAW,CAAC;QAE/B,IAAI,SAAS,EAAE;YACb,KAAK,CAAC,SAAS,GAAG,SAAU,CAAC;SAC9B;QAED,IAAI,OAAO,EAAE;YACX,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;SACtB;QAED,KAAK,CAAC,KAAK,GAAG;YACZ,KAAK,CAAC,UAAU,IAAI,yCAAmB;YACvC,aAAa,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,cAAc,CAAC,IAAI,+BAAc;YACvE,YAAY,IAAI,mCAAgB;YAChC,GAAG,KAAK,CAAC,KAAK;SACf,CAAC,MAAM,CAAC,OAAO,CAAkB,CAAC;QAEnC,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAjED,sCAiEC","sourcesContent":["import {Metadata, Type} from \"@tsed/core\";\nimport {PARAM_METADATA} from \"../constants\";\nimport {IParamOptions} from \"../interfaces/IParamOptions\";\nimport {IParamConstructorOptions, ParamMetadata, IPipe} from \"../models/ParamMetadata\";\nimport {ParamTypes} from \"../models/ParamTypes\";\nimport {DeserializerPipe} from \"../pipes/DeserializerPipe\";\nimport {ParseExpressionPipe} from \"../pipes/ParseExpressionPipe\";\nimport {ValidationPipe} from \"../pipes/ValidationPipe\";\n\nexport interface IUseFilterOptions extends IParamConstructorOptions, IParamOptions<any> {}\n\nexport class ParamRegistry {\n  static get(target: Type<any>, propertyKey: string | symbol, index: number): ParamMetadata {\n    const params = this.getParams(target, propertyKey);\n\n    if (!this.has(target, propertyKey, index)) {\n      params[index] = new ParamMetadata({target, propertyKey, index});\n      this.set(target, propertyKey, index, params[index]);\n    }\n\n    return params[index];\n  }\n\n  static has(target: Type<any>, propertyKey: string | symbol, index: number) {\n    return !!this.getParams(target, propertyKey)[index];\n  }\n\n  static set(target: Type<any>, propertyKey: string | symbol, index: number, paramMetadata: ParamMetadata): void {\n    const params = this.getParams(target, propertyKey);\n\n    params[index] = paramMetadata;\n\n    Metadata.set(PARAM_METADATA, params, target, propertyKey);\n  }\n\n  static getParams(target: Type<any>, propertyKey: string | symbol): ParamMetadata[] {\n    return Metadata.has(PARAM_METADATA, target, propertyKey) ? Metadata.get(PARAM_METADATA, target, propertyKey) : [];\n  }\n\n  /**\n   * @param filter\n   * @param options\n   * @deprecated\n   */\n  /* istanbul ignore next */\n  static useFilter(filter: string | Type<any> | ParamTypes, options: IUseFilterOptions): ParamMetadata {\n    const {expression, useType, propertyKey, index, target, useConverter, useValidation} = options;\n    let {paramType} = options;\n\n    const param = ParamRegistry.get(target!, propertyKey!, index);\n\n    if (typeof filter === \"string\") {\n      paramType = filter as ParamTypes;\n    } else {\n      param.filter = filter;\n    }\n\n    param.expression = expression!;\n\n    if (paramType) {\n      param.paramType = paramType!;\n    }\n\n    if (useType) {\n      param.type = useType;\n    }\n\n    param.pipes = [\n      param.expression && ParseExpressionPipe,\n      useValidation && (param.type || param.collectionType) && ValidationPipe,\n      useConverter && DeserializerPipe,\n      ...param.pipes\n    ].filter(Boolean) as Type<IPipe>[];\n\n    return param;\n  }\n}\n"]}