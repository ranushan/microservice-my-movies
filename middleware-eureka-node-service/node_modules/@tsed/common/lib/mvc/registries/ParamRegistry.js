"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@tsed/core");
const constants_1 = require("../constants");
const ParamMetadata_1 = require("../models/ParamMetadata");
const DeserializerPipe_1 = require("../pipes/DeserializerPipe");
const ParseExpressionPipe_1 = require("../pipes/ParseExpressionPipe");
const ValidationPipe_1 = require("../pipes/ValidationPipe");
class ParamRegistry {
    static get(target, propertyKey, index) {
        const params = this.getParams(target, propertyKey);
        if (!this.has(target, propertyKey, index)) {
            params[index] = new ParamMetadata_1.ParamMetadata({ target, propertyKey, index });
            this.set(target, propertyKey, index, params[index]);
        }
        return params[index];
    }
    static has(target, propertyKey, index) {
        return !!this.getParams(target, propertyKey)[index];
    }
    static set(target, propertyKey, index, paramMetadata) {
        const params = this.getParams(target, propertyKey);
        params[index] = paramMetadata;
        core_1.Metadata.set(constants_1.PARAM_METADATA, params, target, propertyKey);
    }
    static getParams(target, propertyKey) {
        return core_1.Metadata.has(constants_1.PARAM_METADATA, target, propertyKey) ? core_1.Metadata.get(constants_1.PARAM_METADATA, target, propertyKey) : [];
    }
    /**
     * @param filter
     * @param options
     * @deprecated
     */
    /* istanbul ignore next */
    static useFilter(filter, options) {
        const { expression, useType, propertyKey, index, target, useConverter, useValidation } = options;
        let { paramType } = options;
        const param = ParamRegistry.get(target, propertyKey, index);
        if (typeof filter === "string") {
            paramType = filter;
        }
        else {
            param.filter = filter;
        }
        param.expression = expression;
        if (paramType) {
            param.paramType = paramType;
        }
        if (useType) {
            param.type = useType;
        }
        param.pipes = [
            param.expression && ParseExpressionPipe_1.ParseExpressionPipe,
            useValidation && (param.type || param.collectionType) && ValidationPipe_1.ValidationPipe,
            useConverter && DeserializerPipe_1.DeserializerPipe,
            ...param.pipes
        ].filter(Boolean);
        return param;
    }
}
exports.ParamRegistry = ParamRegistry;
//# sourceMappingURL=ParamRegistry.js.map