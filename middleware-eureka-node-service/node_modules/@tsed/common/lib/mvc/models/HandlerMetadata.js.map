{"version":3,"file":"HandlerMetadata.js","sourceRoot":"","sources":["../../../src/mvc/models/HandlerMetadata.ts"],"names":[],"mappings":"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","sourcesContent":["import {Metadata, Type} from \"@tsed/core\";\nimport {PARAM_METADATA} from \"../constants\";\nimport {HandlerType} from \"../interfaces/HandlerType\";\nimport {ParamMetadata} from \"../models/ParamMetadata\";\nimport {ParamRegistry} from \"../registries/ParamRegistry\";\nimport {ParamTypes} from \"./ParamTypes\";\n\nexport interface IHandlerConstructorOptions {\n  target: Type<any> | Function;\n  token?: Type<any>;\n  propertyKey?: string | symbol;\n  type?: HandlerType;\n}\n\nexport class HandlerMetadata {\n  readonly target: any;\n  readonly token: Type<any>;\n  /**\n   * @deprecated\n   */\n  readonly methodClassName: string;\n  readonly propertyKey: string | symbol;\n  /**\n   * @deprecated\n   */\n  readonly method: string;\n  readonly injectable: boolean = false;\n  readonly type: HandlerType = HandlerType.FUNCTION;\n  readonly hasErrorParam: boolean = false;\n  readonly hasNextFunction: boolean = false;\n  handler: any;\n\n  constructor(options: IHandlerConstructorOptions) {\n    const {target, token, propertyKey, type = HandlerType.FUNCTION} = options;\n\n    this.type = type;\n    this.handler = propertyKey ? target.prototype[propertyKey] : target;\n\n    if (propertyKey) {\n      this.target = target;\n      this.token = token!;\n      this.propertyKey = propertyKey;\n      this.methodClassName = String(propertyKey);\n      this.method = String(propertyKey);\n      this.hasNextFunction = this.hasParamType(ParamTypes.NEXT_FN);\n      this.hasErrorParam = this.hasParamType(ParamTypes.ERR);\n      this.injectable = (Metadata.get(PARAM_METADATA, target, propertyKey) || []).length > 0;\n    }\n\n    if (!this.injectable) {\n      this.hasErrorParam = this.handler.length === 4;\n      this.hasNextFunction = this.handler.length >= 3;\n    }\n  }\n\n  get parameters(): ParamMetadata[] {\n    if (this.injectable) {\n      return this.getParams();\n    }\n    // Emulate ParamMetadata\n    const parameters: any[] = [];\n\n    if (this.hasErrorParam) {\n      parameters.push(\n        new ParamMetadata({\n          index: 0,\n          paramType: ParamTypes.ERR\n        })\n      );\n    }\n\n    parameters.push(\n      new ParamMetadata({\n        index: parameters.length,\n        paramType: ParamTypes.REQUEST\n      })\n    );\n    parameters.push(\n      new ParamMetadata({\n        index: parameters.length,\n        paramType: ParamTypes.RESPONSE\n      })\n    );\n\n    if (this.hasNextFunction) {\n      parameters.push(\n        new ParamMetadata({\n          index: parameters.length,\n          paramType: ParamTypes.NEXT_FN\n        })\n      );\n    }\n\n    return parameters;\n  }\n\n  public getParams() {\n    return ParamRegistry.getParams(this.target, this.propertyKey) || [];\n  }\n\n  public hasParamType(paramType: any): boolean {\n    return this.getParams().findIndex(p => p.paramType === paramType) > -1;\n  }\n}\n"]}