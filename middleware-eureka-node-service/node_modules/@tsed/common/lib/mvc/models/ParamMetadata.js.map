{"version":3,"file":"ParamMetadata.js","sourceRoot":"","sources":["../../../src/mvc/models/ParamMetadata.ts"],"names":[],"mappings":";;;AAAA,qCAAsD;AAuBtD,MAAa,aAAc,SAAQ,eAAQ;IAkBzC,YAAY,OAAiC;QAC3C,KAAK,CAAC,OAAO,CAAC,MAAmB,EAAE,OAAO,CAAC,WAAY,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;QAN1E,UAAK,GAAkB,EAAE,CAAC;QAQxB,MAAM,EAAC,UAAU,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAC,GAAG,OAAO,CAAC;QAEvD,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC;QAChD,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC;QAC7C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;IAC3B,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC;IACvC,CAAC;IAED,IAAI,OAAO,CAAC,OAAwC;QAClD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC;SAC1B;aAAM;YACL,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;SACvB;IACH,CAAC;CACF;AAnCC;IADC,iBAAU,EAAE;;iDACa;AAK1B;IADC,iBAAU,EAAE;;gDACyB;AAGtC;IADC,iBAAU,EAAE;;4CACa;AAG1B;IADC,iBAAU,EAAE;sCACJ,WAAI;6CAAU;AAhBzB,sCAwCC","sourcesContent":["import {Enumerable, Storable, Type} from \"@tsed/core\";\nimport {IFilter} from \"../interfaces/IFilter\";\nimport {ParamTypes} from \"./ParamTypes\";\n\nexport interface IParamConstructorOptions {\n  target?: Type<any>;\n  propertyKey?: string | symbol;\n  index: number;\n  required?: boolean;\n  expression?: string;\n  useType?: Type<any>;\n  /**\n   * @deprecated use pipe instead\n   */\n  filter?: Type<IFilter>;\n  paramType?: string | ParamTypes;\n  pipes?: Type<IPipe>[];\n}\n\nexport interface IPipe<T = any, R = any> {\n  transform(value: T, metadata: ParamMetadata): R;\n}\n\nexport class ParamMetadata extends Storable implements IParamConstructorOptions {\n  /**\n   *\n   */\n  @Enumerable()\n  public expression: string;\n  /**\n   *\n   */\n  @Enumerable()\n  public paramType: string | ParamTypes;\n\n  @Enumerable()\n  pipes: Type<IPipe>[] = [];\n\n  @Enumerable()\n  filter?: Type<IFilter>;\n\n  constructor(options: IParamConstructorOptions) {\n    super(options.target as Type<any>, options.propertyKey!, options.index);\n\n    const {expression, paramType, filter, pipes} = options;\n\n    this.expression = expression || this.expression;\n    this.paramType = paramType || this.paramType;\n    this.filter = filter;\n    this.pipes = pipes || [];\n  }\n\n  get service(): string | Type<any> | ParamTypes {\n    return this.filter || this.paramType;\n  }\n\n  set service(service: string | Type<any> | ParamTypes) {\n    if (typeof service === \"string\") {\n      this.paramType = service;\n    } else {\n      this.filter = service;\n    }\n  }\n}\n"]}